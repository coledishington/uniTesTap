#!@SHELL@
# shellcheck shell=sh

# Avoid errors by disallowing expansions of unset variables
set -u

# Constants
SRC_DIR="@abs_srcdir@"
GOLDEN_DIR="$SRC_DIR/testdata"
LIBTOOL="@LIBTOOL@"
VALGRIND="@VALGRIND@"

test_output_xfrm() (
    # Transform any paths that may contain system specific component
    # (like the user running the test).
    @SED@ -e 's|/.\+/tapcore/tests/\([^/.]\+[.]c\):[0-9]\+|\1:LINENUM|g' \
        -e 's|\([^/.]\+[.]c\):[0-9]\+|\1:LINENUM|g' \
        -e 's|[(][0-9.]\+[a-zA-Z]\?s[)]|(***REPLACED TIME***)|g' \
        "$1"
)

run_test() {
    TEST_PATH=$1
    TEST_NAME=$(basename "$TEST_PATH" 2>/dev/null)

    if [ -n "$VALGRIND" ]; then
        $LIBTOOL --mode=execute \
            $VALGRIND --child-silent-after-fork=yes \
            --track-fds=all \
            --log-file="memcheck-${TEST_NAME}.log" \
            --error-exitcode=1 \
            --tool=memcheck \
            --leak-check=full \
            ./"$TEST_PATH"
    else
        ./"$TEST_PATH"
    fi
}

run_tests() {
    NEXT_TEST_ID=1

    for TEST_PATH in ./test_*; do
        if ! [ -x "$TEST_PATH" ]; then
            continue
        fi

        TEST_NAME=$(basename "$TEST_PATH")
        GOLDEN_PATH="$GOLDEN_DIR/$TEST_NAME.golden"
        if ! [ -e "$GOLDEN_PATH" ]; then
            printf '# Ignoring potential test '%s' due to no golden file\n' "$TEST_NAME"
            continue
        fi

        TEST_ID=$NEXT_TEST_ID
        NEXT_TEST_ID=$((NEXT_TEST_ID + 1))
        TEST_OUTPUT="$TEST_PATH.output"
        run_test "$TEST_PATH" >"$TEST_OUTPUT"
        TEST_EXITCODE=$?

        TEST_XFRM_OUTPUT="$TEST_PATH.xfrm.output"
        test_output_xfrm "$TEST_OUTPUT" >"$TEST_XFRM_OUTPUT"

        if [ $TEST_EXITCODE -ne 0 ]; then
            printf 'not ok %d - %s non-zero exit status\n' "$TEST_ID" "$TEST_NAME"
            continue
        fi

        TEST_DIFF_OUTPUT="$TEST_PATH.diff"
        if ! diff "$GOLDEN_PATH" "$TEST_XFRM_OUTPUT" >"$TEST_DIFF_OUTPUT" 2>&1; then
            printf 'not ok %d - %s output changed\n' "$TEST_ID" "$TEST_NAME"
            continue
        fi

        printf 'ok %d - %s\n' "$TEST_ID" "$TEST_NAME"
    done

    # Add extra test case for ensuring all golden files belong to a test
    DESCRIPTION="Check there is a test per golden file"
    N_GOLDEN_FILES=$(find "$GOLDEN_DIR" -name "*.golden" | wc -l)
    if [ "$N_GOLDEN_FILES" = "$((NEXT_TEST_ID - 1))" ]; then
        printf 'ok %d - %s\n' "$NEXT_TEST_ID" "$DESCRIPTION"
    else
        printf 'not ok %d - %s\n' "$NEXT_TEST_ID" "$DESCRIPTION"
    fi

    printf '1..%d\n' "$NEXT_TEST_ID"
}

run_tests
