#!/bin/sh

set -eu

# Constants
YES='yes'
NO='no'

# Arguments
POSITIONAL_ARGS=
VERBOSE=
HELP=

# Globals
COMMIT=
FILES=

help() {
    cat <<eof
usage: check_format.sh [-h|OPTION]... { gitish | file...}
Check file against the style and static analysis for the uniTesTap project

positional arguments:
  gitish                    Git commit-ish or tree-ish. (default: HEAD)
  file                      A file that exists.

options:
  -h, --help                 show this help message and exit
  -v                         print steps of execution
eof
}

add_pos_arg() {
    if [ -n "$POSITIONAL_ARGS" ]; then
        POSITIONAL_ARGS="$POSITIONAL_ARGS
        $1"
    else
        POSITIONAL_ARGS="$1"
    fi
}

parse_args() {
    while [ $# -gt 0 ]; do
        case "$1" in
            -h | --help)
                HELP=$YES
                ;;
            -v | --verbose)
                VERBOSE=$YES
                ;;
            --)
                # Only positional arguments past here
                break
                ;;
            -*)
                printf 'Unknown option %s\n' "$1" >&2
                return 1
                ;;
            *)
                add_pos_arg "$1"
                ;;
        esac
        shift
    done

    while [ $# -gt 0 ]; do
        add_pos_arg "$1"
        shift
    done
}

set_git_diff_files() {
    staged_arg=
    if [ "$STAGED" = "$YES" ]; then
        staged_arg='--staged'
    fi

    FILES=$(git diff $staged_arg --name-only --diff-filter=ACMR)
}

set_git_show_files() {
    arg='HEAD'
    if [ "$#" -gt 0 ]; then
        arg=$1
    fi
    FILES=$(git show --pretty='' --name-only --diff-filter=ACMR "$arg")
}

match_shell_script() {
    # Check for hashbang
    case "$(head -n 1 "$1")" in
        \#!/bin/sh | \#!@SHELL@)
            return 0
            ;;
    esac

    # Check for shellcheck shell directive
    if grep -qE '# ?shellcheck.* shell=sh' "$1"; then
        return 0
    fi

    return 1
}

match_git_head() {
    IN_HASH=$(git rev-parse "$1")
    HEAD_HASH=$(git rev-parse 'HEAD')
    [ "$IN_HASH" = "$HEAD_HASH" ]
}

check_c_souce() {
    # Style checker
    codespell -i 3 -w -- "$1"
    clang-format -i -- "$1"
}

check_shell_script() {
    # Style checker
    codespell -i 3 -w -- "$1"
    shfmt -p -i 4 -ci -s -w -- "$1"

    # Static analysis
    shellcheck -- "$1"
}

check_file() {
    file=$1

    # Match extension
    case "$file" in
        *.sh)
            check_shell_script "$file"
            return
            ;;
        *.c | *.h)
            check_c_souce "$file"
            return
            ;;
    esac

    # Match content tags if no extensions are matched
    if match_shell_script "$file"; then
        check_shell_script "$file"
        return
    fi

    printf 'No matching format tool for "%s"\n' "$file" >&2
}

check_files() {
    while [ $# -gt 0 ]; do
        check_file "$1"
        shift
    done
}

check_commit_msg() {
    HASH="$1"

    if match_git_head "$HASH"; then
        # Interactively edit commit message if HEAD
        GIT_EDITOR='codespell -i 3 -w' git commit --amend
    else
        SHOW=$(mktemp check_format.gitshow.XXX)

        # Check if commit message has any issues and reports
        # any to stdout/stderr
        git show -s --format='%B' "$HASH" >"$SHOW"
        codespell "$SHOW"
        rm "$SHOW"
    fi
}

if ! parse_args "$@"; then
    exit 1
fi

if [ "$HELP" = "$YES" ]; then
    help
    exit 1
fi

if [ "$VERBOSE" = "$YES" ]; then
    set -x
fi

OLD_IFS=$IFS
IFS="
"
# shellcheck disable=2086
set -- $POSITIONAL_ARGS
IFS=$OLD_IFS

if [ "$#" -lt 1 ]; then
    # Check the first one of index, working dir, or HEAD that contains changed files
    STAGED="$YES" set_git_diff_files
    if [ -z "$FILES" ]; then
        STAGED="$NO" set_git_diff_files
    fi
    if [ -z "$FILES" ]; then
        set_git_show_files
        COMMIT=$(git rev-parse 'HEAD')
    fi
elif ! [ -e "$1" ]; then
    set_git_show_files "$1"
    COMMIT=$(git rev-parse "$1")
fi

if [ -n "$FILES" ]; then
    OLD_IFS=$IFS
    IFS="
    "
    # shellcheck disable=2086
    set -- $FILES
    IFS=$OLD_IFS
fi

if [ -n "$COMMIT" ]; then
    check_commit_msg "$COMMIT"
fi

# Allow for paths containing a space
check_files "$@"
